By:Noah Tseng

Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

SELECT COUNT(*)
FROM table
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

SELECT COUNT(DISTINCT PK/FK)
FROM table

i. Business = PK=id, 10000
ii. Hours = FK=business_id, 1562
iii. Category = FK=business_id, 2643
iv. Attribute = FK=business_id, 1115
v. Review = PK=id, 10000
vi. Checkin = FK=business_id, 493
vii. Photo = PK=id, 10000
viii. Tip = FK=user_id, 537
ix. User = PK=id, 10000
x. Friend = FK=user_id, 11
xi. Elite_years = FK=user_id, 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:

SELECT COUNT(*)
FROM user
WHERE id IS NULL
	OR name IS NULL
	OR review_count IS NULL
	OR yelping_since IS NULL
	OR useful IS NULL
	OR funny IS NULL
	OR cool IS NULL
	OR fans IS NULL
	OR average_stars IS NULL
	OR compliment_hot IS NULL
	OR compliment_more IS NULL
	OR compliment_profile IS NULL
	OR compliment_cute IS NULL
	OR compliment_list IS NULL
	OR compliment_note IS NULL
	OR compliment_plain IS NULL
	OR compliment_cool IS NULL
	OR compliment_funny IS NULL
	OR compliment_writer IS NULL
	OR compliment_photos IS NULL
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

SELECT MIN(column),MAX(column),AVG(column)
FROM TABLE

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT city
	,SUM(review_count) AS total_reviews
FROM business
GROUP BY city
ORDER BY total_reviews DESC
	
	
	Copy and Paste the Result Below:
+-----------------+---------------+
| city            | total_reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)

	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars
	,COUNT(stars) AS number_of_stars
FROM business
WHERE city = 'Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-----------------+
| stars | number_of_stars |
+-------+-----------------+
|   1.5 |               1 |
|   2.5 |               2 |
|   3.5 |               3 |
|   4.0 |               2 |
|   4.5 |               1 |
|   5.0 |               1 |
+-------+-----------------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT stars
	,COUNT(stars) AS number_of_stars
FROM business
WHERE city = 'Beachwood'
GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-----------------+
| stars | number_of_stars |
+-------+-----------------+
|   2.0 |               1 |
|   2.5 |               1 |
|   3.0 |               2 |
|   3.5 |               2 |
|   4.0 |               1 |
|   4.5 |               2 |
|   5.0 |               5 |
+-------+-----------------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT name
	,review_count
FROM user
ORDER BY review_count DESC LIMIT 3
	
		
	Copy and Paste the Result Below:

+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
Posting more reviews does not correlate with more fans.

I ran the query:
SELECT name
	,review_count
	,fans
FROM user
ORDER BY review_count DESC

to get the output:

-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)

Even without statistical analysis, we can clearly see that there is no correlation between the review_count column and fans column.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "hate". There are 1780 reviews with the word "love" and only 232 reviews with the word "hate".

	
	SQL code used to arrive at answer:

SELECT COUNT(*) AS text_with_love
FROM review
WHERE TEXT LIKE '%love%';

SELECT COUNT(*) AS text_with_hate
FROM review
WHERE TEXT LIKE '%hate%';
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT name
	,fans
FROM user
ORDER BY fans DESC LIMIT 10
	
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+

	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

city:Las Vegas
category:shopping
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, the businesses with 2-3 stars have different hour distributions compared to the businesses with 4-5 stars. The highest rated shopping establishment "Desert Medical Equipment" only operates 5 days a week from 8am to pm. The lowest rated shopping establishment "Walgreens" is open 7 days a week from 8 am to 10pm. However, the 3.5 rated "Wooly Wonders" and 4.5 rated "Red Rock Canyon Visitor Center" only differ slightly in hour distribution.

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, but there is no correlation between the number of reviews and the star rating the business possesses. 

         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
The lowest rated businesses possess the postal code "89121" which provides some inference that shopping businesses from this area of Las Vegas might have lower star ratings.

SQL code used for analysis:

SELECT b.stars
	,b.name
	,b.city
	,c.category
	,b.review_count
	,b.postal_code
	,h.hours
FROM category c
INNER JOIN business b ON c.business_id = b.id
INNER JOIN hours h ON c.business_id = h.business_id
WHERE city LIKE '%VEGAS%'
	AND c.category = 'Shopping'
ORDER BY CASE 
		WHEN h.hours LIKE 'Sunday'
			THEN 1
		WHEN h.hours LIKE 'Monday'
			THEN 2
		WHEN h.hours LIKE 'Tuesday'
			THEN 3
		WHEN h.hours LIKE 'Wednesday'
			THEN 4
		WHEN h.hours LIKE 'Thursday'
			THEN 5
		WHEN h.hours LIKE 'Friday'
			THEN 6
		WHEN h.hours LIKE 'Saturday'
			THEN 7
		END ASC
	,b.stars ASC
			
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: There are more distinct businesses that are open than that are closed.
         
         
ii. Difference 2: Businesses that are open have significantly more reviews than businesses that are closed.
         
         
         
SQL code used for analysis:

SELECT COUNT(DISTINCT id)
	,AVG(review_count)
	,AVG(stars)
	,SUM(review_count)
	,is_open
FROM business
GROUP BY is_open

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

I want to predict the number of fans a user will have.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

I will use the user table, tip table, and elite_years table for this analysis. I want to see if there is correlation between a user's number of fans and a relevant value in any other column in one of these three tables. If there is correlation between the number of fans and at least one other column it would be possible to predict the number of fans for a user by using the correlated data as a baseline.
                           
                  
iii. Output of your finished dataset:

+-----------+-------+--------+-------+------+--------------+---------------+------+---------------------+-------+------+
| name      | stars | useful | funny | cool | review_count | average_stars | fans | yelping_since       | likes | year |
+-----------+-------+--------+-------+------+--------------+---------------+------+---------------------+-------+------+
| Cynthia   |     3 |      1 |     0 |    0 |           54 |          4.54 |   45 | 2011-09-10 00:00:00 |  None | 2013 |
| Raymond   |     3 |      5 |     1 |    6 |          447 |          3.84 |   29 | 2011-02-22 00:00:00 |  None | 2013 |
| Neil Ryan |     4 |      5 |     1 |    4 |          100 |          3.64 |   13 | 2010-05-04 00:00:00 |  None | 2013 |
| Donna     |     5 |      0 |     0 |    0 |           23 |          3.63 |   10 | 2012-12-28 00:00:00 |  None | 2013 |
| Tony      |     4 |      0 |     0 |    0 |          181 |          3.53 |   10 | 2008-09-21 00:00:00 |  None | 2013 |
| Tasha     |     3 |      3 |     0 |    1 |          250 |          3.81 |    8 | 2012-02-04 00:00:00 |  None | 2013 |
| April     |     5 |      1 |     0 |    0 |           58 |          3.59 |    3 | 2012-07-22 00:00:00 |  None | 2013 |
| Amy       |     5 |      8 |     4 |    5 |          134 |          3.71 |    2 | 2009-12-25 00:00:00 |  None | 2013 |
| Benjamin  |     2 |      1 |     0 |    0 |          111 |          3.43 |    2 | 2013-12-14 00:00:00 |  None | 2013 |
| Melissa   |     5 |      3 |     2 |    1 |            7 |          3.75 |    2 | 2012-08-17 00:00:00 |  None | 2013 |
| Talia     |     3 |      2 |     1 |    1 |           26 |          3.48 |    2 | 2010-03-08 00:00:00 |  None | 2013 |
| Barbara   |     4 |      0 |     0 |    0 |            7 |          3.71 |    1 | 2012-05-22 00:00:00 |  None | 2013 |
| Jennifer  |     4 |      0 |     0 |    0 |           14 |          4.13 |    1 | 2013-11-27 00:00:00 |  None | 2013 |
| JoJo      |     3 |      3 |     1 |    1 |           33 |          2.97 |    1 | 2010-01-12 00:00:00 |  None | 2013 |
| Levi      |     1 |      7 |     1 |    2 |            2 |           5.0 |    1 | 2010-11-03 00:00:00 |  None | 2013 |
| Martine   |     5 |      0 |     1 |    0 |            2 |           4.5 |    1 | 2014-10-01 00:00:00 |  None | 2013 |
| Rich      |     2 |      0 |     0 |    0 |            7 |          4.29 |    1 | 2012-06-29 00:00:00 |  None | 2013 |
| Shoaib    |     1 |      5 |     2 |    4 |           70 |           4.1 |    1 | 2008-07-13 00:00:00 |  None | 2013 |
| Virginia  |     1 |      5 |     0 |    1 |            5 |          2.33 |    1 | 2013-08-13 00:00:00 |  None | 2013 |
| Angel     |     5 |      3 |     0 |    0 |            5 |           3.5 |    0 | 2015-11-30 00:00:00 |  None | 2013 |
| Angela    |     5 |      0 |     0 |    0 |            1 |           5.0 |    0 | 2015-07-13 00:00:00 |  None | 2013 |
| Anthony   |     2 |      8 |     9 |    8 |            2 |           4.5 |    0 | 2014-12-25 00:00:00 |  None | 2013 |
| Antonia   |     2 |      4 |     1 |    0 |            8 |          3.88 |    0 | 2013-08-07 00:00:00 |  None | 2013 |
| Arman     |     5 |      0 |     0 |    0 |            1 |           5.0 |    0 | 2017-07-19 00:00:00 |  None | 2013 |
| Ashley    |     4 |      0 |     0 |    0 |            3 |           5.0 |    0 | 2014-01-04 00:00:00 |  None | 2013 |
+-----------+-------+--------+-------+------+--------------+---------------+------+---------------------+-------+------+         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT u.name
	,r.stars
	,r.useful
	,r.funny
	,r.cool
	,u.review_count
	,u.average_stars
	,u.fans
	,u.yelping_since
	,t.likes
	,e.year
FROM review r
INNER JOIN user u ON r.id = u.id
LEFT JOIN tip t ON u.id = t.user_id
LEFT JOIN elite_years e
GROUP BY u.name
ORDER BY u.fans DESC LIMIT 25
	
